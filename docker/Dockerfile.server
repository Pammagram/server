###################
# DEVELOPMENT
###################
FROM node:18.12.0-slim AS development
# apt-get clean clear the cache after installation
RUN apt-get update && apt-get install -y openssl && apt-get clean

# Create app directory
WORKDIR /server

# A wildcard is used to ensure both package.json AND package-lock.json are copied
COPY package*.json ./

# Install app dependencies
# --ignore-scripts ommits installing husky
RUN npm ci --ignore-scripts

COPY tsconfig*.json ./
COPY .env.development ./
COPY src ./src

# workaround for incompatibility of os
RUN npm uninstall bcrypt
RUN npm install bcrypt

CMD [ "npm", "run", "start:dev" ]

EXPOSE 8080

###################
# BUILD FOR PRODUCTION
###################

FROM node:18.12.0-slim AS build

WORKDIR /server

COPY package*.json ./

# In order to run `npm run build` we need access to the Nest CLI which is a dev dependency.
# In the previous development stage we ran `npm ci` which installed all dependencies,
# so we can copy over the node_modules directory from the development image
COPY --from=development /server/node_modules ./node_modules

COPY . .

# Run the build command which creates the production bundle
RUN npm run build

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

USER node

###################
# PRODUCTION
###################

FROM node:18.12.0-slim As production
RUN apt-get update
RUN apt-get install -y openssl

# Copy the bundled code from the build stage to the production image
COPY --from=build /server/node_modules ./node_modules
COPY --from=build /server/dist ./dist
COPY --from=build /server/.env.production ./

# Start the server using the production build
CMD [ "node", "dist/src/main.js" ]
